var contador_mensagens = 0;
var modoAtual = 'perfil_conservador';

let etapaInvestimento = 0;
let dadosInvestimento = {
    valor_inicial: null,
    valor_mensal: null,
    duracao: null,
    objetivo: null,
    relacao: null,
    perfil_investimento: null
};
let emColeta = false;
let historico = [];


function alterarModo(modo){
  modoAtual = modo;
  console.log(`Modo alterado para: ${modo}`);
}

document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('modo1').checked = true;
    document.querySelectorAll('input[name="modo_chat"]').forEach(radio => {
        radio.addEventListener('change', function() {
            alterarModo(this.value);
        });
    });
});

function extrairDados(texto) {
  // Extrair n√∫meros (valor inicial, mensal e dura√ß√£o)
  const numeros = texto.match(/\d+(?:[\.,]\d+)?/g);
  if (numeros) {
    const valor = parseFloat(numeros[0].replace(',', '.'));
    if (dadosInvestimento.valor_inicial === null) {
      dadosInvestimento.valor_inicial = valor;
      console.log("‚úÖ Valor inicial definido:", dadosInvestimento.valor_inicial);
    } else if (dadosInvestimento.valor_mensal === null) {
      dadosInvestimento.valor_mensal = valor;
      console.log("‚úÖ Valor mensal definido:", dadosInvestimento.valor_mensal);
    } else if (dadosInvestimento.duracao === null) {
      dadosInvestimento.duracao = Math.max(1, valor); // m√≠nimo 1 ano
      console.log("‚úÖ Dura√ß√£o definida:", dadosInvestimento.duracao);
    }
  }

  // Objetivo
  if (!dadosInvestimento.objetivo) {
    if (/patrim√¥ni|patrimonio/i.test(texto)) dadosInvestimento.objetivo = "Aumentar patrim√¥nio";
    else if (/seguran√ß|seguranca/i.test(texto)) dadosInvestimento.objetivo = "Seguran√ßa financeira";
    else if (/irpf/i.test(texto)) dadosInvestimento.objetivo = "Economizar com IRPF";
    else if (/viagem|outros|outro|compra|objetivo/i.test(texto)) dadosInvestimento.objetivo = "Outros";

    if (dadosInvestimento.objetivo) {
      console.log("‚úÖ Objetivo definido:", dadosInvestimento.objetivo);
    }
  }

  // Rela√ß√£o com investimento
  if (!dadosInvestimento.relacao) {
    if (/nunca invest/i.test(texto) && /n√£o entendo|nao entendo|nada/i.test(texto))
      dadosInvestimento.relacao = "Nunca investiu e n√£o entende nada";
    else if (/nunca invest/i.test(texto))
      dadosInvestimento.relacao = "Nunca investiu e entende pouco";
    else if (/algumas vezes/i.test(texto))
      dadosInvestimento.relacao = "J√° investiu algumas vezes e entende um pouco";
    else if (/estou investindo|invisto/i.test(texto) && /pouco/i.test(texto))
      dadosInvestimento.relacao = "Est√° investindo e entende pouco";
    else if (/invisto sempre|experi√™ncia|experiencia/i.test(texto))
      dadosInvestimento.relacao = "Investe sempre e tem experi√™ncia";

    if (dadosInvestimento.relacao) {
      console.log("‚úÖ Rela√ß√£o definida:", dadosInvestimento.relacao);
    }
  }

  console.log("üìä Estado atual dos dados:", dadosInvestimento);
}

function gerarPromptInvestimento(textoUsuario) {
  const contexto = historico.map(m => `${m.role}: ${m.content}`).join("\n");

  // Detecta quais campos est√£o faltando
  const faltando = [];
  if (dadosInvestimento.valor_inicial === null) faltando.push("valor inicial");
  if (dadosInvestimento.valor_mensal === null) faltando.push("valor mensal");
  if (dadosInvestimento.duracao === null) faltando.push("dura√ß√£o");
  if (dadosInvestimento.objetivo === null) faltando.push("objetivo");
  if (dadosInvestimento.relacao === null) faltando.push("rela√ß√£o com investimento");

  const faltandoTexto = faltando.join(", ");

  return `
    Voc√™ √© um assistente do banco BTG Pactual.
    O usu√°rio est√° fornecendo informa√ß√µes sobre um investimento que quer fazer.
    Seu objetivo √© entender o que ele j√° respondeu e perguntar apenas o que falta, de forma natural e direta.

    As informa√ß√µes que voc√™ precisa coletar s√£o:
    1. Valor inicial
    2. Valor mensal
    3. Dura√ß√£o (em anos, m√≠nimo 1)
    4. Objetivo (Aumentar patrim√¥nio, seguran√ßa financeira, economizar com IRPF, outros)
    5. Rela√ß√£o com investimento (Nunca investiu e n√£o entende nada, Nunca investiu e entende pouco, j√° investiu algumas vezes e entende um pouco, est√° investindo e entende pouco, investe sempre e tem experi√™ncia)

    Dados j√° coletados:
    Valor inicial: ${dadosInvestimento.valor_inicial ?? "n√£o informado"}
    Valor mensal: ${dadosInvestimento.valor_mensal ?? "n√£o informado"}
    Dura√ß√£o: ${dadosInvestimento.duracao ?? "n√£o informado"}
    Objetivo: ${dadosInvestimento.objetivo ?? "n√£o informado"}
    Rela√ß√£o com investimento: ${dadosInvestimento.relacao ?? "n√£o informado"}

    Mensagem do usu√°rio: "${textoUsuario}"

    Contexto da conversa:
    ${contexto}

    Ainda faltam as seguintes informa√ß√µes: ${faltandoTexto || "nenhuma"}.

    ${
      dadosInvestimento.objetivo === null
        ? "Por favor, pe√ßa ao usu√°rio que diga claramente o objetivo do investimento (indiretamente dando exemplos de seguran√ßa financeira, aumentar patrim√¥nio, IRPF etc - sem usar estes termos) antes de prosseguir com qualquer recomenda√ß√£o."
        : "Se todos os dados j√° tiverem sido coletados, apenas fa√ßa um resumo objetivo das informa√ß√µes e siga para as sugest√µes de investimento."
    }
  `;
}

function coletaCompleta() {
  return (
    dadosInvestimento.valor_inicial !== null &&
    dadosInvestimento.valor_mensal !== null &&
    dadosInvestimento.duracao !== null &&
    dadosInvestimento.objetivo !== null &&
    dadosInvestimento.relacao !== null
  );
}

async function interpretarComIA(textoUsuario) {
  // Prompt que ser√° enviado ao seu endpoint de chat. Pede-se apenas JSON sem explica√ß√µes.
  const prompt = `
    Voc√™ √© um analisador de mensagens em portugu√™s. Receber√° uma mensagem de usu√°rio e deve RESPONDER
    EXCLUSIVAMENTE com um JSON v√°lido (sem texto, sem explica√ß√µes) com as seguintes chaves:
    - valor_inicial: n√∫mero (float) ou null
    - valor_mensal: n√∫mero (float) ou null
    - duracao: inteiro (anos) ou null
    - objetivo: uma das strings {"Aumentar patrim√¥nio","Seguran√ßa financeira","Economizar com IRPF","Outros"} ou null
    - relacao: uma das strings {"Nunca investiu e n√£o entende nada","Nunca investiu e entende pouco",
      "J√° investiu algumas vezes e entende um pouco","Est√° investindo e entende pouco",
      "Investe sempre e tem experi√™ncia"} ou null

    Regras:
    1) Interprete n√∫meros escritos por extenso (ex: "dez mil", "dois mil e quinhentos") e formatos com "mil", "k", "R$" etc.
    2) Normalizar para n√∫mero puro (ex: "R$ 2.500,00" => 2500).
    3) Dura√ß√£o deve ser em anos. Se usu√°rio disser "6 meses", converta para 0.5 (ou retorne o n√∫mero de anos). Prefer√™ncia por anos - se menos de 1 ano, retornar decimal (ex: 0.5).
    4) Se n√£o houver informa√ß√£o para alguma chave, retornar null para ela.
    5) Retorne apenas o JSON (objeto), nada mais.

    Mensagem do usu√°rio: """${textoUsuario}"""
  `;

  try {
    const response = await fetch('/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: prompt,
        modo: modoAtual,
        // se quiser sinalizar ao backend que √© parse-only, inclua uma flag
        parse_only: true
      }),
    });

    const data = await response.json();

    // data.reply deve conter o JSON (mas pode vir com texto). Tentamos extrair o primeiro objeto JSON encontrado.
    const textoResposta = (data.reply || '').trim();

    // tenta extrair um bloco JSON do texto de resposta
    const match = textoResposta.match(/\{[\s\S]*\}/);
    if (!match) {
      console.warn("IA n√£o retornou JSON detect√°vel. Resposta inteira:", textoResposta);
      return null;
    }

    const jsonStr = match[0];
    const parsed = JSON.parse(jsonStr);

    // valida e normaliza tipos m√≠nimos
    const resultado = {
      valor_inicial: parsed.valor_inicial != null ? Number(parsed.valor_inicial) : null,
      valor_mensal: parsed.valor_mensal != null ? Number(parsed.valor_mensal) : null,
      duracao: parsed.duracao != null ? Number(parsed.duracao) : null,
      objetivo: parsed.objetivo ?? null,
      relacao: parsed.relacao ?? null
    };

    return resultado;
  } catch (err) {
    console.error("Erro ao interpretar com IA:", err);
    return null;
  }
}

async function determinarPerfilInvestimento() {
  const prompt = `
  Voc√™ √© um analista financeiro do BTG Pactual. 
  Com base nas informa√ß√µes abaixo, determine o PERFIL DO INVESTIMENTO ideal.
  Perfis poss√≠veis: "Conservador", "Moderado", "Sofisticado".

  Dados:
  Valor inicial: ${dadosInvestimento.valor_inicial}
  Valor mensal: ${dadosInvestimento.valor_mensal}
  Dura√ß√£o: ${dadosInvestimento.duracao} anos
  Objetivo: ${dadosInvestimento.objetivo}
  Rela√ß√£o com investimento: ${dadosInvestimento.relacao}

  Crit√©rios gerais:
  - Conservador: objetivos de seguran√ßa, prazos curtos (<2 anos), pouca experi√™ncia.
  - Moderado: prazos m√©dios (2‚Äì5 anos), algum risco, alguma experi√™ncia.
  - Sofisticado: prazos longos, grandes valores, foco em patrim√¥nio, experi√™ncia alta.

  Responda apenas com o nome do perfil, nada mais.
  `;
  try {
    const response = await fetch('/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: prompt, modo: modoAtual }),
    });
    const data = await response.json();
    const perfil = (data.reply || "").trim();
    dadosInvestimento.perfil_investimento = perfil;
    console.log("üèÅ Perfil do investimento determinado:", perfil);
  } catch (err) {
    console.error("Erro ao determinar perfil do investimento:", err);
  }
}

async function enviarMensagem(event) {
  event.preventDefault();

  const input = document.getElementById('mensagem');
  const texto = input.value.trim(); // ‚ö†Ô∏è corrigido: faltavam par√™nteses
  const chat = document.getElementById('chat');

  if (!texto) return;

  // Exibe pergunta do usu√°rio
  const pergunta = document.createElement('article');
  pergunta.classList.add('pergunta');
  pergunta.innerHTML = `<p>${texto}</p>`;
  chat.appendChild(pergunta);
  chat.scrollTop = chat.scrollHeight;
  input.value = '';
  contador_mensagens++;

  historico.push({ role: "user", content: texto });

  let mensagemParaAPI = texto;

  // üîç 1) DETECTA PEDIDO DE CONSULTA DE INVESTIMENTOS
  if (/\b(consultar|ver|mostrar|listar|acompanhar)\b.*investiment/i.test(texto)) {
    const resposta = document.createElement('article');
    resposta.classList.add('resposta');
    resposta.innerHTML = `<p>Consultando seus investimentos...</p>`;
    chat.appendChild(resposta);
    chat.scrollTop = chat.scrollHeight;

    try {
      const resp = await consultarInvestimento();
      const lista = await resp.json();

      if (!lista || lista.length === 0) {
        resposta.innerHTML = `<p>Voc√™ ainda n√£o possui investimentos registrados.</p>`;
      } else {
        let html = "<p>Seus investimentos atuais:</p><ul>";
        lista.forEach(inv => {
          html += `<li>
            Valor inicial: R$ ${inv.valor_inicial.toFixed(2)} |
            Valor mensal: R$ ${inv.valor_mensal.toFixed(2)} |
            Dura√ß√£o: ${inv.duracao} anos |
            Objetivo: ${inv.objetivo}
          </li>`;
        });
        html += "</ul>";
        resposta.innerHTML = html;
      }
    } catch (err) {
      console.error("Erro ao consultar investimentos:", err);
      resposta.innerHTML = `<p>N√£o foi poss√≠vel consultar os investimentos no momento.</p>`;
    }

    chat.scrollTop = chat.scrollHeight;
    return; // ‚õî Evita continuar o fluxo normal
  }

  // üí¨ Detecta in√≠cio do modo de investimento
  if (/investimento|investir/i.test(texto) && !emColeta) {
    emColeta = true;
    etapaInvestimento = 1;
    mensagemParaAPI = gerarPromptInvestimento(texto);
  }
  // üß† Continua o modo de coleta de investimento
  else if (emColeta) {
    const parseResult = await interpretarComIA(texto);

    if (parseResult) {
      for (const chave in parseResult) {
        if (parseResult[chave] !== null && parseResult[chave] !== undefined) {
          dadosInvestimento[chave] = parseResult[chave];
          console.log(`‚úÖ ${chave} definido (IA):`, dadosInvestimento[chave]);
        }
      }
    } else {
      extrairDados(texto); // fallback
    }

    mensagemParaAPI = gerarPromptInvestimento(texto);
  }
  // üëã Primeira mensagem (inicial)
  else if (contador_mensagens === 1) {
    const instrucoesIniciais = `
      Voc√™ √© um assistente virtual do banco BTG Pactual, criado para orientar clientes sobre investimentos de acordo com seu perfil de investidor.
      Estamos em 2025, em um cen√°rio de economia brasileira est√°vel, com juros moderados e crescente interesse em investimentos de renda vari√°vel e produtos digitais.
      Seu papel √© ajudar o cliente a entender qual tipo de investimento faz mais sentido para ele e responder d√∫vidas sobre produtos financeiros.

      Voc√™ deve responder de forma curta, direta e sem formata√ß√£o de texto.
      H√° tr√™s perfis poss√≠veis: Conservador, Moderado e Sofisticado.
      
      Modo atual: ${modoAtual}
      Usu√°rio: ${texto}
    `;
    mensagemParaAPI = instrucoesIniciais;
  } else {
    mensagemParaAPI = `[Modo: ${modoAtual}]\n${texto}`;
  }

  // üì° Chamada √† API do chat (resposta do assistente)
  const response = await fetch('/api/chat', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      message: mensagemParaAPI,
      modo: modoAtual
    }),
  });

  const data = await response.json();

  historico.push({ role: "assistant", content: data.reply });

  const resposta = document.createElement('article');
  resposta.classList.add('resposta');
  resposta.innerHTML = `<p>${data.reply}</p>`;
  chat.appendChild(resposta);
  chat.scrollTop = chat.scrollHeight;

  // üèÅ Exibe resumo final quando coleta estiver completa
  if (emColeta && coletaCompleta()) {
    emColeta = false;

    await determinarPerfilInvestimento();

    const resumo = `
      Investimento completo:
      Valor inicial: ${dadosInvestimento.valor_inicial}
      Valor mensal: ${dadosInvestimento.valor_mensal}
      Dura√ß√£o: ${dadosInvestimento.duracao} anos
      Objetivo: ${dadosInvestimento.objetivo}
      Rela√ß√£o com investimento: ${dadosInvestimento.relacao}
      Perfil do investimento: ${dadosInvestimento.perfil_investimento}
    `;
    const respostaFinal = document.createElement('article');
    respostaFinal.classList.add('resposta');
    respostaFinal.innerHTML = `<p>${resumo}</p>`;
    chat.appendChild(respostaFinal);
    chat.scrollTop = chat.scrollHeight;
  }
}

async function salvarInvestimento(dados) {
  try{
    const resp = await fetch("https://localhost:8080/investimentos",{
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(dados)
    });
    const result = await resp.json();
    console.log("Investimento salvo:", result);
  }catch(err){
    consolo.log("Erro ao salvar investimento:", err);
  }
}

async function consultarInvestimento() {
  try {
    const resp = await fetch("http://localhost:8080/investimentos");
    return resp;
  } catch (err) {
    console.error("Erro ao consultar investimentos:", err);
    throw err;
  }
}
